Approch-1  
Node* sortList(Node *head){
   int count0=0;
   int count1=0;
   int count2=0;
   Node*temp=head;
   while(temp!=NULL){
       if(temp->data==0){
           count0++;
       }
       else if(temp->data==1){
           count1++;
       }
       else{
           count2++;
       }
       temp=temp->next;
   }
   temp=head;
   while(temp!=NULL){
       if(count0!=0){
           temp->data=0;
           count0--;
       }
       else if(count1!=0){
           temp->data=1;
           count1--;
       }
       else{
           temp->data=2;
           count2--;
       }
       temp=temp->next;
   }
   return head;
}

Approach-2


void insertAttail(Node*&tail,Node*curr){
    tail->next=curr;
    tail=curr;
}


Node* sortList(Node *head){
    Node*zerohead=new Node(-1);
     Node*zerotail=zerohead;
     Node*onehead=new Node(-1);
     Node*onetail= onehead;
      Node*twohead=new Node(-1);
      Node*twotail= twohead;
      
      Node*curr=head;
      
      while(curr!=NULL){
          int value=curr->data;
          if(value==0){
             insertAttail(zerotail,curr);
          }
          else if(value==1){
              insertAttail(onetail,curr);
          }
          else if(value==2){
              insertAttail(twotail,curr);
          }
          curr=curr->next;
      }


      //merge the 3 linked list of 0 ,1,2
       if(onehead->next!=NULL){
           // if list is not empty
           zerotail->next=onehead->next;
       }
       else{
           // if list is empty
           zerotail->next=twohead->next;
       }
       onetail->next=twohead->next;
       twotail->next=NULL;
       
       head=zerohead->next;
       
       delete(onehead);
       delete(zerohead);
       delete(twohead);

      return head;     
      
}







