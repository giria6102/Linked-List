bool isCycleDFS(int node,unordered_map<int,bool>&visited, unordered_map<int,bool>&dfsVisited, unordered_map<int,list<int>>&adj){
  visited[node] = true;
  dfsVisited[node] = true;
  for(int child:adj[node]){
    if(!visited[child]){
      if(isCycleDFS(child, visited, dfsVisited, adj)){
        return true;
      }
    }
    else if(dfsVisited[child]) return true;
  }
  dfsVisited[node] = false;
  return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
 unordered_map<int,list<int>>adj;
  for(int i=0; i<edges.size(); i++){
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  unordered_map<int,bool>visited;
  unordered_map<int,bool>dfsVisited;

  for(int i=1; i<=n; i++){
    if(!visited[i]){
      if(isCycleDFS(i, visited, dfsVisited, adj)){
        return true;
      }
    }
  }
  return false;
}
