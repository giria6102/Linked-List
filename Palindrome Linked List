Appraoch-1 ,T(c)=O(N),S(c)=O(N)

bool isPalindrome(Node *head)
    {
       
        vector<int>arr;
        
        Node*curr=head;
        while(curr!=NULL){
            arr.push_back(curr->data);
            curr=curr->next;
        }
        
       int n=arr.size();
        int s=0;
        int e=n-1;
        while(s<=e){
            if(arr[s]!=arr[e]){
                return 0;
            }
            s++;
            e--;
        }
        return 1;
        
    }
Appraoch -2 , T(c)=O(N),S(c)=O(N)

Node*getmiddle(Node*head){
        Node*slow=head;
        Node*fast=head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    Node*reverse(Node*head){
        Node*curr=head;
        Node*prev=NULL;
        Node*forward=NULL;
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
        
    }
   
    bool isPalindrome(Node *head)
    {
       
       Node*middle=getmiddle(head);
       
       Node*temp=middle->next;
       
       middle->next=reverse(temp);
       
    
     // compare two list
     Node*head1=head;
     Node*head2=middle->next;
       while(head2!=NULL){
           if(head1->data!=head2->data){
               return false;
           }
           head1=head1->next;
           head2=head2->next;
       }
       return true;
    }
